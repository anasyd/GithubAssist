name: Build and Release Extension

on:
  push:
    branches:
      - production
    tags:
      - "v*"
  pull_request:
    branches:
      - production

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Get version from manifest
        id: get_version
        run: |
          VERSION=$(grep '"version"' manifest.json | sed 's/.*"version": *"\([^"]*\)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if tag exists and create if needed
        id: tag_check
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${TAG_NAME} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${TAG_NAME} does not exist"
            
            # Create tag only if we're on production branch (not already a tag push)
            if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
              echo "Creating tag ${TAG_NAME}..."
              curl -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ github.repository }}/git/refs \
                -d "{
                  \"ref\": \"refs/tags/${TAG_NAME}\",
                  \"sha\": \"${{ github.sha }}\"
                }"
              echo "created_tag=true" >> $GITHUB_OUTPUT
            else
              echo "created_tag=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create Debug Build
        run: |
          # Create debug directory
          mkdir -p builds/debug

          # Copy all files except .git and builds
          rsync -av --exclude='.git' --exclude='builds' --exclude='.github' --exclude='*.md' --exclude='LICENSE' ./ builds/debug/

          # Ensure debug mode is enabled in debug build
          sed -i 's/const DEBUG_MODE = false;/const DEBUG_MODE = true;/' builds/debug/content.js

          echo "Debug build created with DEBUG_MODE = true"

      - name: Create Production Build
        run: |
          # Create production directory
          mkdir -p builds/production

          # Copy all files except .git and builds
          rsync -av --exclude='.git' --exclude='builds' --exclude='.github' --exclude='*.md' --exclude='LICENSE' ./ builds/production/

          # Ensure debug mode is disabled in production build
          sed -i 's/const DEBUG_MODE = true;/const DEBUG_MODE = false;/' builds/production/content.js

          echo "Production build created with DEBUG_MODE = false"

      - name: Create ZIP files
        run: |
          cd builds

          # Create debug zip
          cd debug
          zip -r "../github-merge-helper-v${{ steps.get_version.outputs.version }}-debug.zip" .
          cd ..

          # Create production zip
          cd production
          zip -r "../github-merge-helper-v${{ steps.get_version.outputs.version }}-production.zip" .
          cd ..

          # List created files
          ls -la *.zip

      - name: Verify builds
        run: |
          echo "=== Debug Build Verification ==="
          grep "DEBUG_MODE" builds/debug/content.js | head -1

          echo "=== Production Build Verification ==="
          grep "DEBUG_MODE" builds/production/content.js | head -1

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/production' && steps.tag_check.outputs.created_tag == 'true')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          files: |
            builds/github-merge-helper-v${{ steps.get_version.outputs.version }}-debug.zip
            builds/github-merge-helper-v${{ steps.get_version.outputs.version }}-production.zip
          body: |
            ## GitHub Merge Conflict Helper v${{ steps.get_version.outputs.version }}

            ### üì¶ Downloads
            - **Production Build**: `github-merge-helper-v${{ steps.get_version.outputs.version }}-production.zip` - Ready for Chrome Web Store
            - **Debug Build**: `github-merge-helper-v${{ steps.get_version.outputs.version }}-debug.zip` - For development and debugging

            ### ‚ú® Features
            - One-click conflict resolution
            - Automatic clipboard copy
            - Branch name detection
            - Works with GitHub's merge conflict editor

            ### üöÄ Installation
            1. Download the production zip file
            2. Extract it to a folder
            3. Open Chrome extensions (chrome://extensions/)
            4. Enable Developer mode
            5. Click "Load unpacked" and select the extracted folder

            ### üêõ Debug Version
            The debug version includes console logging for troubleshooting. Use the production version for normal usage.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Debug Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: debug-build-v${{ steps.get_version.outputs.version }}
          path: builds/github-merge-helper-v${{ steps.get_version.outputs.version }}-debug.zip

      - name: Upload Production Artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: production-build-v${{ steps.get_version.outputs.version }}
          path: builds/github-merge-helper-v${{ steps.get_version.outputs.version }}-production.zip
